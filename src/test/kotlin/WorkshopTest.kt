import kotlin.test.Test
import kotlin.test.assertEquals

// Assume these functions are defined in your Workshop1.kt file
fun celsiusToFahrenheit(celsius: Double): Double {
    return (celsius * 9 / 5) + 32
}

fun kilometersToMiles(kilometers: Double): Double {
    return kilometers * 0.621371
}

// Assume these are in Workshop2.kt
data class Product(val name: String, val category: String, val price: Double)

fun calculateTotalElectronicsPriceOver500(products: List<Product>): Double {
    return products
        .filter { it.category == "Electronics" && it.price > 500 }
        .sumOf { it.price }
}

fun countElectronicsProductsOver500(products: List<Product>): Int {
    return products
        .count { it.category == "Electronics" && it.price > 500 }
}


class WorkshopTest {

    // --- Tests for Workshop #1: Unit Converter ---

    // celsius input: 20.0
    // expected output: 68.0
    @Test
    fun `test celsiusToFahrenheit with positive value`() {
        // Arrange: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ input ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        val celsiusInput = 20.0
        val expectedFahrenheit = 68.0

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        val actualFahrenheit = celsiusToFahrenheit(celsiusInput)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        assertEquals(expectedFahrenheit, actualFahrenheit, 0.001, "20¬∞C should be 68¬∞F")
    }

    // celsius input: 0.0
    // expected output: 32.0
    @Test
    fun `test celsiusToFahrenheit with zero`() {
        // Arrange: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ 0 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏ã‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏™
        val celsiusInput = 0.0
        val expectedFahrenheit = 32.0 // 0¬∞C is 32¬∞F

        // Act: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
        val actualFahrenheit = celsiusToFahrenheit(celsiusInput)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        assertEquals(expectedFahrenheit, actualFahrenheit, 0.001, "0¬∞C should be 32¬∞F")
    }

    // celsius input: -10.0
    // expected output: 14.0
    @Test
    fun `test celsiusToFahrenheit with negative value`() {
        // Arrange: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö 10 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏ã‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏™
        val celsiusInput = -10.0
        val expectedFahrenheit = 14.0 // -10¬∞C is 14¬∞F

        // Act: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
        val actualFahrenheit = celsiusToFahrenheit(celsiusInput)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        assertEquals(expectedFahrenheit, actualFahrenheit, 0.001, "-10¬∞C should be 14¬∞F")
    }

    // test for kilometersToMiles function
    // kilometers input: 1.0
    // expected output: 0.621371
    @Test
    fun `test kilometersToMiles with one kilometer`() {
        // Arrange: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î 1 ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
        val kilometersInput = 1.0
        val expectedMiles = 0.621371 // 1 km is approximately 0.621371 miles

        // Act: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
        val actualMiles = kilometersToMiles(kilometersInput)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        assertEquals(expectedMiles, actualMiles, 0.000001, "1 km should be 0.621371 miles")
    }

    // --- Tests for Workshop #1: Unit Converter End ---

    // --- Tests for Workshop #2: Data Analysis Pipeline ---
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå Workshop2.kt ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    // ‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó
    // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ calculateTotalElectronicsPriceOver500 ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö List<Product> ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Double
    // ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test cases ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ > 500 ‡∏ö‡∏≤‡∏ó
    // üö®

    @Test
    fun `test calculateTotalElectronicsPriceOver500`() {
        // Arrange: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        val products = listOf(
            Product("Laptop", "Electronics", 1200.0),
            Product("Mouse", "Electronics", 300.0),
            Product("Keyboard", "Electronics", 600.0),
            Product("Chair", "Furniture", 800.0),
            Product("Monitor", "Electronics", 750.0)
        )
        // Expected: Laptop (1200) + Keyboard (600) + Monitor (750) = 2550.0
        val expectedTotal = 2550.0

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        val actualTotal = calculateTotalElectronicsPriceOver500(products)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°
        assertEquals(expectedTotal, actualTotal, 0.001, "Total electronics price over 500 should be 2550.0")
    }

    @Test
    fun `test calculateTotalElectronicsPriceOver500 with no matching products`() {
        // Arrange: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó
        val products = listOf(
            Product("Mousepad", "Electronics", 50.0),
            Product("Desk", "Furniture", 1000.0),
            Product("Headphones", "Electronics", 450.0)
        )
        val expectedTotal = 0.0 // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        val actualTotal = calculateTotalElectronicsPriceOver500(products)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°
        assertEquals(expectedTotal, actualTotal, 0.001, "Total should be 0.0 when no matching products.")
    }

    @Test
    fun `test calculateTotalElectronicsPriceOver500 with empty list`() {
        // Arrange: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        val products = emptyList<Product>()
        val expectedTotal = 0.0

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        val actualTotal = calculateTotalElectronicsPriceOver500(products)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏£‡∏ß‡∏°
        assertEquals(expectedTotal, actualTotal, 0.001, "Total should be 0.0 for an empty list.")
    }

    // ‡∏à‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test cases ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î 'Electronics' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó
    // üö®
    @Test
    fun `test countElectronicsProductsOver500`() {
        // Arrange: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        val products = listOf(
            Product("Laptop", "Electronics", 1200.0),
            Product("Mouse", "Electronics", 300.0),
            Product("Keyboard", "Electronics", 600.0),
            Product("Chair", "Furniture", 800.0),
            Product("Monitor", "Electronics", 750.0)
        )
        // Expected: Laptop, Keyboard, Monitor (3 items)
        val expectedCount = 3

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        val actualCount = countElectronicsProductsOver500(products)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        assertEquals(expectedCount, actualCount, "Should count 3 electronics products over 500.")
    }

    @Test
    fun `test countElectronicsProductsOver500 with no matching products`() {
        // Arrange: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Electronics ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó
        val products = listOf(
            Product("Mousepad", "Electronics", 50.0),
            Product("Desk", "Furniture", 1000.0),
            Product("Headphones", "Electronics", 450.0)
        )
        val expectedCount = 0

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        val actualCount = countElectronicsProductsOver500(products)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        assertEquals(expectedCount, actualCount, "Should count 0 when no matching products.")
    }

    @Test
    fun `test countElectronicsProductsOver500 with empty list`() {
        // Arrange: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        val products = emptyList<Product>()
        val expectedCount = 0

        // Act: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        val actualCount = countElectronicsProductsOver500(products)

        // Assert: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        assertEquals(expectedCount, actualCount, "Should count 0 for an empty list.")
    }

    // --- Tests for Workshop #2: Data Analysis Pipeline End ---10.17
}